# usefull commands

## to get list of all actions
#fastlane actions

## to get list of parameters of action
#fastlane action ANY-ACTION
# example: fastlane action match


# USERNAME = ''
BUNDLE_ID = 'by.come.life.Lifebox'
APP_NAME = 'lifebox-LIFE'
# SCHEME = "Depo_LifeTech"
PROJECT = "Depo.xcodeproj"
TARGET = "Depo_LifeTech"
BUILD_FOLDER_NAME = "builds"
# TEAM_ID = ""
# DEV_NAME = "" #mayby need Team Name

TYPES = ["development", "appstore", "adhoc"]
CONFIGS = ["debug", "release", "adhoc"]
SCHEMES = ["PROD", "PREPROD", "TEST"]

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
fastlane_version "2.19.1"

default_platform :ios

platform :ios do
	lane :beta_jenkins do
		begin
			jenkins_build()
		rescue => exception
			on_error(exception)
		end
	end

	lane :beta_jenkins_preprod do
		begin
			jenkins_build_preprod()
		rescue => exception
			on_error(exception)
		end
	end

	def jenkins_build
		xcode_select "/Applications/Xcode.app"
		setup_jenkins
		bundle_install
		cocoapods
		my_gym(scheme: "PROD")
		fabric
		slack_post
	end

	def jenkins_build_preprod
		xcode_select "/Applications/Xcode.app"
		setup_jenkins
		bundle_install
		cocoapods
		my_gym(scheme: "PREPROD")
		fabric
		slack_post
	end


	lane :beta_diawi do
		setup_jenkins
		my_gym(scheme: "PROD")
		diawi
	end

	lane :beta_fabric do
		my_gym(scheme: "PROD")
		fabric
		slack_post
		notify_about_completion
	end


  #--------------- build ipa ---------------

  desc "Create ipa"
  lane :my_gym do |options|
  	
    scheme = options[:scheme]

    if !SCHEMES.include?(scheme)
      # raise("scheme can be PROD, PREPROD or TEST")
      UI.user_error!("scheme can be PROD, PREPROD or TEST")
      # exit
    end

    gym(
      # configuration: config, #"Adhoc", # Defaults to 'Release'
      scheme: "Depo_LifeTech_" + scheme,
      silent: true, # Hide all information that's not necessary while building
      clean: false,
      output_directory: "./#{BUILD_FOLDER_NAME}",    # store the ipa in this folder
      output_name: "#{APP_NAME}.ipa",
      #output_directory: "path/to/dir", # Destination directory. Defaults to current directory.
      #output_name: "my-app.ipa",       # specify the name of the .ipa file to generate (including file extension)
      export_options: {
      	method: "ad-hoc"
        # ,
        # provisioningProfiles: { 
        #   "#{BUNDLE_ID}" => "ADHOC_LifeboxForTurkcell"
        # }
      }

    )
  end


  #--------------- distribute ---------------

  # https://dashboard.diawi.com/docs/apis/upload
  lane :diawi do
  	ipa_path = lane_context[SharedValues::IPA_OUTPUT_PATH]
    # time = Time.new
    diawiToken = 'rvA4lMxATOqmygUZmMgM7n5vchCnDkb5TJuZnVSibZ'
    filePath = "#{File.expand_path("..", Dir.pwd)}/#{BUILD_FOLDER_NAME}/#{APP_NAME}.ipa" # cd .. &&
    sh(
    	"curl -X POST https://upload.diawi.com/"\
    	" -F \"token=#{diawiToken}\""\
    	" -F \"file=@#{filePath}\""\
    	" -F \"find_by_udid=0\""\
    	" -F \"wall_of_apps=0\""\
    	" -F \"callback_emails=zdaecq@gmail.com\""
    )
  end

  desc "Distribute build via Fabric"
  lane :fabric do
  	ipa_path = lane_context[SharedValues::IPA_OUTPUT_PATH]
  	filePath = "#{File.expand_path("..", Dir.pwd)}/#{BUILD_FOLDER_NAME}/#{APP_NAME}.ipa"

  	crashlytics(
  		api_token: "74412d8a38e9c5b44ca9993298b0ec4cba26289b",
  		build_secret: "23466683fd868f8140731ca083851a229b69fe7c806515ab6cc300e32cd5f388",
  		ipa_path: filePath,
  		emails: ["lifetechqa@icloud.com",
  			"lifetechqa2@gmail.com",
  			"lifetechqa4@icloud.com",
  			"lifetechqa5@icloud.com",
  			"lifetechqa6@icloud.com", 
  			"6257515test@gmail.com"]
  	)
  end


  #--------------- notify ---------------

  desc "Post message to the #lifebox-ios-firengine slack channel"
  lane :slack_post do
  	version = get_build_number_from_plist(xcodeproj: PROJECT, target: TARGET)
  	slack(
  		message: "Build #{version} successfully released!",
  		success: true,
  		slack_url: "https://hooks.slack.com/services/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",
      # slack_url: "https://hooks.slack.com/services/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", #lifebox-ios-firengine
      payload: { 
      	"Build Date" => Time.new.to_s
      },
      default_payloads: []
    )
  end

  lane :notify_about_completion do
  	version = get_build_number_from_plist(xcodeproj: PROJECT, target: TARGET)
  	notification(subtitle: "Build distribution is finished", message: "#{version}")
  end

  def on_error(exception)
  	UI.user_error!("Build failed with exception : #{exception}")
  	slack(
  		message: "Build failed with exception : #{exception}",
  		success: false,
  		slack_url: "https://hooks.slack.com/services/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",
  		payload: { 
  			"Build Date" => Time.new.to_s
  		},
  		default_payloads: []
  	)
  end

end
