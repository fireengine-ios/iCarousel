require './Helpers/version_manager'
## same
# require_relative 'Helpers/version_manager'

## to get list of all actions
#fastlane actions

## to get list of parameters of action
#fastlane action ANY-ACTION
# example: fastlane action match

## To install plugins:
# fastlane install_plugins
## To update plugins:
# fastlane update_plugins


#Lifebox
#BUNDLE_ID_LIFEBOX = 'by.come.life.Lifebox'
APP_NAME_LIFEBOX = "lifebox-LIFE"
SCHEME_LIFEBOX = "Depo_LifeTech"
TARGET_LIFEBOX = "Depo_LifeTech"
BUILD_NUMBER_LIFEBOX = VersionManager.get_build_number_my(xcodeproj: ".", target: TARGET_LIFEBOX)

#Lifedrive
#BUNDLE_ID_LIFEDRIVE = 'by.com.life.LifeDrive'
APP_NAME_LIFEDRIVE = "billo_LifeTech"
SCHEME_LIFEDRIVE = "LifeTech_Billo"
TARGET_LIFEDRIVE = "LifeTech_Billo"

BUILD_NUMBER_LIFEDRIVE = VersionManager.get_build_number_my(xcodeproj: ".", target: TARGET_LIFEDRIVE)

# #Business
# #BUNDLE_ID_BUSINESS = 'by.com.life.LifeboxBusiness'
# APP_NAME_BUSINESS = "business_LifeTech"
# SCHEME_BUSINESS = "lifeBox_Business"
# TARGET_BUSINNESS = "lifeBox_Business"

# BUILD_NUMBER_BUSINESS = VersionManager.get_build_number_my(xcodeproj: ".", target: TARGET_BUSINNESS)

#Common
PROJECT = "Depo.xcodeproj"
BUILD_FOLDER_NAME = "builds"

## If you want to automatically update fastlane if a new version is available:
# update_fastlane

## This is the minimum version number required.
# fastlane_version "2.19.1"

# default_platform :ios

# platform :ios do

  error do |lane, exception|
    switch_to_prod
  end

  #--------------- beta uploads ---------------

# TODO: replace fabric and diawi with firebase
# TODO: add lifedrive support

	# lane :beta_jenkins do
	# 	begin
	# 	  xcode_select "/Applications/Xcode.app"
 #      setup_jenkins
 #      bundle_install
 #      cocoapods
 #      update_fastlane_plugins()
 #      poeditor_download
 #      my_gym
 #      fabric
 #      slack_post
	# 	rescue => exception
	# 		on_error(exception)
	# 	end
	# end
  # 
	# lane :beta_jenkins_preprod do
	# 	begin
	# 	  xcode_select "/Applications/Xcode.app"
 #      setup_jenkins
 #      bundle_install
 #      cocoapods
 #      update_fastlane_plugins()
 #      poeditor_download
 #      switch_to_preprod
 #      my_gym
 #      fabric
 #      slack_post

 #      switch_to_prod
	# 	rescue => exception
	# 		on_error(exception)
	# 	end
	# end

 #  def update_fastlane_plugins
 #    sh("fastlane update_plugins")
 #  end

	
 #  lane :build_prod_and_preprod do
 #    #create two prod and preprod builds at a time
 #    #switch to branch manually and then run the lane
    
 #    git_pull
 #    create_new_branch
 #    increment_version
 #    switch_to_preprod
 #    beta_diawi
 # 	  switch_to_prod
 #    beta_diawi
 #    git_commit(path: "./Depo/App/Depo_LifeTech-Info.plist", message: "Version up")
 #    push_to_git_remote(local_branch: "version_up")
 #  end

  desc "run tests"
  lane :my_scan do
    scan(
      scheme: "LifeboxUnitTests",
      code_coverage: true,
      devices: ["iPhone 8 Plus (11.4)"],
      test_without_building: true
    )
  end


  #--------------- build ipa ---------------

  desc "Create ipa"
  lane :my_gym do # |options|
    gym(
      # configuration: config, #"Adhoc", # Defaults to 'Release'
      scheme: SCHEME_LIFEBOX,
      silent: true, # Hide all information that's not necessary while building
      clean: false,
      output_directory: "./#{BUILD_FOLDER_NAME}",    # store the ipa in this folder
      output_name: "#{APP_NAME_LIFEBOX}.ipa",
      # suppress_xcode_output: true,
      #output_directory: "path/to/dir", # Destination directory. Defaults to current directory.
      #output_name: "my-app.ipa",       # specify the name of the .ipa file to generate (including file extension)
      export_options: {
      	method: "ad-hoc"
        # ,
        # provisioningProfiles: { 
        #   "#{BUNDLE_ID}" => "ADHOC_LifeboxForTurkcell"
        # }
      }

    )
  end

lane :my_gym_lifedrive do # |options|

    gym(
      # configuration: config, #"Adhoc", # Defaults to 'Release'
      scheme: SCHEME_LIFEDRIVE,
      silent: true, # Hide all information that's not necessary while building
      clean: false,
      output_directory: "./#{BUILD_FOLDER_NAME}",    # store the ipa in this folder
      output_name: "#{APP_NAME_LIFEBOX}.ipa",
      # suppress_xcode_output: true,
      #output_directory: "path/to/dir", # Destination directory. Defaults to current directory.
      #output_name: "my-app.ipa",       # specify the name of the .ipa file to generate (including file extension)
      export_options: {
      	method: "ad-hoc"
        # ,
        # provisioningProfiles: { 
        #   "#{BUNDLE_ID}" => "LifeDrive_adhoc"
        # }
      }

    )
  end

  #--------------- distribute ---------------

  FIREBASE_KEY_LIFEBOX = "1:805163098188:ios:80d4ad2ac5355c36b394e9"
  FIREBASE_KEY_LIFEDRIVE = "1:805163098188:ios:ac7a91b24941c456b394e9"
  FIREBASE_QA_GROUPS = "qa-lifetech, qa-turkcell"

  TESTERS_LIST = "lifetechqa@icloud.com,
                  lifetechqa2@gmail.com,
                  lifetechqa4@icloud.com,
                  lifetechqa5@icloud.com,
                  lifetechqa6@icloud.com, 
                  6257515test@gmail.com,
                  can.kucukakdag@turkcell.com.tr"


  desc "Lifetech Firebase distribution"
  private_lane :firebase_lifetech do |options|
    firebaseKey = options[:key]
    appName = options[:appName]
    # ipa_path = lane_context[SharedValues::IPA_OUTPUT_PATH]
    filePath = "#{File.expand_path("..", Dir.pwd)}/#{BUILD_FOLDER_NAME}/#{appName}.ipa"

    firebase_app_distribution(
        app: firebaseKey,
        groups: FIREBASE_QA_GROUPS,
        # testers: TESTERS_LIST
        # release_notes: "",
        ipa_path: filePath
    )
  end

  desc "LifeTech Lifebox build distribution via Firebase"
  lane :firebase_lifetech_lifebox do
    my_gym
    firebase_lifetech(key: FIREBASE_KEY_LIFEBOX, appName: APP_NAME_LIFEBOX)
    slack_post(target: TARGET_LIFEBOX)
    notify_about_completion(target: TARGET_LIFEBOX)
  end

  desc "LifeTech Lifedrive build distribution via Firebase"
  lane :firebase_lifetech_billo do
    my_gym_lifedrive
    firebase_lifetech(key: FIREBASE_KEY_LIFEDRIVE, appName: APP_NAME_LIFEDRIVE)
    slack_post(target: TARGET_LIFEDRIVE)
    notify_about_completion(target: TARGET_LIFEBOX)
  end

  #--------------- notify ---------------

  desc "Post message to the #lifebox-ios-firengine slack channel"
  lane :slack_post do |options|
    target = options[:target]
  	version = get_build_number_from_plist(xcodeproj: PROJECT, target: target)
  	slack(
  		message: "Build #{version} successfully released!",
  		success: true,
  		slack_url: "https://hooks.slack.com/services/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", #lifebox-ios-builds
      # slack_url: "https://hooks.slack.com/services/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", #lifebox-ios-firengine
      payload: { 
      	"Build Date" => Time.new.to_s
      },
      default_payloads: []
    )
  end

  lane :notify_about_completion do |options|
    target = options[:target]
  	version = get_build_number_from_plist(xcodeproj: PROJECT, target: target)
  	notification(subtitle: "Build distribution is finished", message: "#{version}")
  end

  def on_error(exception)
  	UI.user_error!("Build failed with exception : #{exception}")
  	slack(
  		message: "Build failed with exception : #{exception}",
  		success: false,
  		slack_url: "https://hooks.slack.com/services/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",
  		payload: { 
  			"Build Date" => Time.new.to_s
  		},
  		default_payloads: []
  	)
  end

  #--------------- helpers ---------------

  lane :poeditor_download do
    for language in ["en", "uk", "tr", "ru", "ro", "es", "de", "ar", "sq", "fr"]
      poeditor_export(
        api_token: "b91af56559195b57ea5e1bddb49d3e54",
        project_id: "113239",
        export_format: "apple_strings",
        language: language,
        output_path: "./Depo/App/Resources/#{language}.lproj/OurLocalizable.strings"
      )
    end
  end

  lane :business_poeditor_download do
    for language in ["en", "tr"]
      poeditor_export(
        api_token: "b91af56559195b57ea5e1bddb49d3e54",
        project_id: "397845",
        export_format: "apple_strings",
        language: language,
        output_path: "./LifeBox_Business/App/Resources/#{language}.lproj/OurLocalizable.strings"
      )
    end
  end

  lane :fix_build_number do
    buildNum = BUILD_NUMBER_LIFEBOX
    preprodSuffix = "_preprod"
    
    while buildNum.include?(preprodSuffix) do
      buildNum = buildNum.chomp(preprodSuffix)
    end
    
    set_build_number(build: buildNum)
  end
  
  lane :switch_to_preprod do
    fix_build_number
    
    set_build_number(build: BUILD_NUMBER_LIFEBOX + "_preprod")
    
    replace_text_in_file(
      file_path: "#{ENV['PWD']}/Depo/Business/ApiServices/RequestService/RouteRequests.swift",
      old_text: "private static let currentServerEnvironment = ServerEnvironment.production",
      new_text: "private static let currentServerEnvironment = ServerEnvironment.preProduction"
    )
  end

  lane :switch_to_prod do
    fix_build_number
    
    set_build_number(build: BUILD_NUMBER_LIFEBOX)
    
    replace_text_in_file(
      file_path: "#{ENV['PWD']}/Depo/Business/ApiServices/RequestService/RouteRequests.swift",
      old_text: "private static let currentServerEnvironment = ServerEnvironment.preProduction",
      new_text: "private static let currentServerEnvironment = ServerEnvironment.production"
    )
  end

  def replace_text_in_file(params)
    file_path = params[:file_path]
    old_text = params[:old_text]
    new_text = params[:new_text]

    text = File.read(file_path)
    new_contents = text.gsub(/#{old_text}/, new_text)
    File.write(file_path, new_contents)
    # To write changes to the file, use:
    # File.open(file_name, "w") { |file| file.puts new_contents }
  end 
  
  lane :create_new_branch do |params|
    branchName = params[:name] ? params[:name] : "version_up"
    
    sh("git", "branch", branchName)
    sh("git", "checkout", branchName)
  end
  
  lane :increment_version do 
    version = BUILD_NUMBER_LIFEBOX
    versionComps = version.split(".")
    lastPartIndex = versionComps.count - 1
    increasedVersion = versionComps[lastPartIndex].to_i + 1
    versionComps[lastPartIndex] = increasedVersion.to_s
    finalVersion = versionComps.join(".")
    
    puts "old version: #{version}"
    puts "new version: #{finalVersion}"
    
    set_build_number(build: finalVersion)
  end
  
  lane :set_build_number do |params|
    buildNumber = params[:build]
    
    VersionManager.set_build_number(xcodeproj: ".", target: TARGET_LIFEBOX, new_number: buildNumber)
    BUILD_NUMBER = buildNumber
  end
 
#--------------------- build_number functions ---------------------

  desc "fastlane-plugin-versioning required. also it needs more time that my class"
  lane :test_get_build_number do
    build_number = get_build_number_from_plist(xcodeproj: "Depo.xcodeproj", scheme: SCHEME_LIFEBOX)
    puts "version: #{build_number}"

    increment_build_number_in_plist(build_number: build_number + "_preprod", scheme: SCHEME_LIFEBOX)

    build_number = get_build_number_from_plist(xcodeproj: "Depo.xcodeproj", scheme: SCHEME_LIFEBOX)
    puts "new version: #{build_number}"
  end

  lane :test_get_build_number_my do
    build_number = VersionManager.get_build_number_my(xcodeproj: ".", target: TARGET_LIFEBOX)
    puts "version: #{build_number}"

    set_build_number(build: build_number + "_preprod")

    build_number = Fastlane::VersionManager.get_build_number_my(xcodeproj: ".", target: TARGET_LIFEBOX)
    puts "new version: #{build_number}"
  end

  
# end